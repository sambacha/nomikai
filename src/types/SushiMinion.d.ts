/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SushiMinionInterface extends ethers.utils.Interface {
  functions: {
    "actions(uint256)": FunctionFragment;
    "doWithdraw(address,uint256)": FunctionFragment;
    "executeAction(uint256)": FunctionFragment;
    "moloch()": FunctionFragment;
    "proposeAction(address,uint256,bytes,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "actions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "moloch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeAction",
    values: [string, BigNumberish, BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "actions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doWithdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moloch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAction",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteAction(uint256,address)": EventFragment;
    "ProposeAction(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeAction"): EventFragment;
}

export class SushiMinion extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SushiMinionInterface;

  functions: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean, string] & {
        value: BigNumber;
        to: string;
        proposer: string;
        executed: boolean;
        data: string;
      }
    >;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean, string] & {
        value: BigNumber;
        to: string;
        proposer: string;
        executed: boolean;
        data: string;
      }
    >;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeAction(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeAction(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moloch(overrides?: CallOverrides): Promise<[string]>;

    "moloch()"(overrides?: CallOverrides): Promise<[string]>;

    proposeAction(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proposeAction(address,uint256,bytes,string)"(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  actions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, boolean, string] & {
      value: BigNumber;
      to: string;
      proposer: string;
      executed: boolean;
      data: string;
    }
  >;

  "actions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, boolean, string] & {
      value: BigNumber;
      to: string;
      proposer: string;
      executed: boolean;
      data: string;
    }
  >;

  doWithdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "doWithdraw(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeAction(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeAction(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moloch(overrides?: CallOverrides): Promise<string>;

  "moloch()"(overrides?: CallOverrides): Promise<string>;

  proposeAction(
    actionTo: string,
    actionValue: BigNumberish,
    actionData: BytesLike,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proposeAction(address,uint256,bytes,string)"(
    actionTo: string,
    actionValue: BigNumberish,
    actionData: BytesLike,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean, string] & {
        value: BigNumber;
        to: string;
        proposer: string;
        executed: boolean;
        data: string;
      }
    >;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean, string] & {
        value: BigNumber;
        to: string;
        proposer: string;
        executed: boolean;
        data: string;
      }
    >;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAction(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeAction(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    moloch(overrides?: CallOverrides): Promise<string>;

    "moloch()"(overrides?: CallOverrides): Promise<string>;

    proposeAction(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposeAction(address,uint256,bytes,string)"(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ExecuteAction(
      proposalId: null,
      executor: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; executor: string }
    >;

    ProposeAction(
      proposalId: null,
      proposer: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; proposer: string }
    >;
  };

  estimateGas: {
    actions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeAction(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeAction(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moloch(overrides?: CallOverrides): Promise<BigNumber>;

    "moloch()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAction(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proposeAction(address,uint256,bytes,string)"(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeAction(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeAction(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moloch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "moloch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeAction(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proposeAction(address,uint256,bytes,string)"(
      actionTo: string,
      actionValue: BigNumberish,
      actionData: BytesLike,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
